{"version":3,"sources":["serviceWorker.ts","i18n.ts","components/CategoryDisplay/CategoryDisplay.tsx","utils.tsx","components/ConversionDisplay/ConversionDisplay.tsx","components/App/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","i18n","use","initReactI18next","init","resources","en","translation","App_Title","App_SubTitle","Category_Length","Category_Temp","Category_Time","Category_Volume","Category_Weight","Category_Angle","Category_Area","Category_Speed","lng","keySeparator","interpolation","escapeValue","ConversionCard","props","t","useTranslation","history","useHistory","Col","Card","className","Title","src","icon_url","alt","category","Body","Button","variant","onClick","push","navigate_to","ConversionRow","Row","xs","sm","md","lg","columns","map","conversion","key","icon","slug","CategoryDisplay","conversions","conversionData","sort","a","b","chunks","input","chunk_size","results","length","splice","chunkArray","chunk","idx","ConversionDisplay","params","id","App","Container","width","height","basename","path","render","target","rel","href","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.c521852d.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\n// the translations\n// (tip move them in a JSON file and import them)\nconst resources = {\n  en: {\n    translation: {\n      App_Title: \"Unit Converter\",\n      App_SubTitle: \"Convert values from one unit of measure to another.\",\n      Category_Length: \"Length\",\n      Category_Temp: \"Temp\",\n      Category_Time: \"Time\",\n      Category_Volume: \"Volume\",\n      Category_Weight: \"Weight\",\n      Category_Angle: \"Angle\",\n      Category_Area: \"Area\",\n      Category_Speed: \"Speed\",\n    },\n  },\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: \"en\",\n\n    keySeparator: false, // we do not use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  });\n\nexport default i18n;\n","import React from \"react\";\nimport { Button, Row, Col, Card } from \"react-bootstrap\";\nimport { chunkArray } from \"../../utils\";\nimport conversionData from \"../../data/conversions.json\";\nimport Conversion from \"../../types/Conversion\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\n\n/* Some sizes to break the grid on */\nconst xs_size: number = 2;\nconst sm_size: number = 2;\nconst md_size: number = 2;\nconst lg_size: number = 4;\n\nconst ConversionCard = (props: {\n  category: string;\n  icon_url: string;\n  navigate_to: string;\n}) => {\n  const { t } = useTranslation();\n  let history = useHistory();\n\n  function handleClick() {\n    history.push(props.navigate_to);\n  }\n\n  return (\n    <Col>\n      <Card className=\"mb-3\">\n        {/* <Card.Img variant=\"top\" src={props.icon_url} /> */}\n        <Card.Title className=\"text-center mb-0 mt-1\">\n          <img src={props.icon_url} alt={t(props.category)} />\n        </Card.Title>\n        <Card.Body className=\"text-center\">\n          <Button\n            className=\"stretched-link\"\n            variant=\"success\"\n            onClick={handleClick}\n          >\n            {t(props.category)}\n          </Button>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nconst ConversionRow = (props: { columns: Conversion[] }) => {\n  return (\n    <Row xs={xs_size} sm={sm_size} md={md_size} lg={lg_size}>\n      {props.columns.map((conversion) => (\n        <ConversionCard\n          key={conversion.category}\n          category={conversion.category}\n          icon_url={conversion.icon}\n          navigate_to={conversion.slug}\n        />\n      ))}\n    </Row>\n  );\n};\n\nconst CategoryDisplay = () => {\n  const { t } = useTranslation();\n\n  // Load the arary from the local json conversions file.\n  const conversions: Conversion[] = [...conversionData];\n  conversions.sort((a, b) => {\n    return a.sort - b.sort;\n  });\n  const chunks: Conversion[][] = chunkArray(conversions, lg_size);\n\n  return (\n    <>\n      {chunks.map((chunk, idx) => (\n        <ConversionRow key={idx} columns={chunk} />\n      ))}\n    </>\n  );\n};\n\nexport default CategoryDisplay;\n","import Conversion from \"./types/Conversion\";\n\nexport function chunkArray(input: Conversion[], chunk_size: number) {\n  var results = [];\n\n  while (input.length) {\n    results.push(input.splice(0, chunk_size));\n  }\n\n  return results;\n}\n","import React from \"react\";\nimport { Helmet } from \"react-helmet-async\";\n\nconst ConversionDisplay = (props: any) => {\n  const { match } = props;\n\n  return <div>{match.params.id}</div>;\n};\n\nexport default ConversionDisplay;\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { useTranslation } from \"react-i18next\";\nimport CategoryDisplay from \"../CategoryDisplay/CategoryDisplay\";\nimport ConversionDisplay from \"../ConversionDisplay/ConversionDisplay\";\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\nconst App = () => {\n  const { t } = useTranslation();\n\n  return (\n    <Container className=\"p-3\">\n      <div className=\"text-center\">\n        <img\n          className=\"d-block mx-auto mb-4\"\n          src=\"/unit-converter/android-chrome-192x192.png\"\n          alt=\"\"\n          width=\"72\"\n          height=\"72\"\n        />\n        <h2>{t(\"App_Title\")}</h2>\n        <p className=\"lead\">{t(\"App_SubTitle\")}</p>\n      </div>\n      <Router basename=\"/unit-converter\">\n        <Switch>\n          <Route\n            path=\"/:id\"\n            render={(props) => {\n              return <ConversionDisplay {...props} />;\n            }}\n          />\n          <Route path=\"/\">\n            <CategoryDisplay />\n          </Route>\n        </Switch>\n      </Router>\n      icons by{\" \"}\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://icons8.com\">\n        Icons8\n      </a>\n      , source code on{\" \"}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/ian-hamlin/unit-converter\"\n      >\n        GitHub\n      </a>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./i18n\";\nimport App from \"./components/App/App\";\nimport { HelmetProvider } from \"react-helmet-async\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HelmetProvider>\n      <App />\n    </HelmetProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}