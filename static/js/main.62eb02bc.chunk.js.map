{"version":3,"sources":["serviceWorker.ts","i18n.ts","components/CategoryDisplay/CategoryDisplay.tsx","utils.tsx","components/NotFound/NotFound.tsx","components/ConversionDisplay/ConversionDisplay.tsx","components/App/App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","i18n","use","initReactI18next","init","resources","en","translation","App_Title","App_SubTitle","Header_Conversions","Convert_Value","Convert_From","Convert_To","UnitGroup_Angle","UnitGroup_Area","UnitGroup_Length","UnitGroup_Speed","UnitGroup_Temp","UnitGroup_Time","UnitGroup_Volume","UnitGroup_Weight","Units_Angle_Degrees","Units_Angle_Radians","Units_Area_Acre","Units_Area_SqCentimeter","Units_Area_SqFeet","Units_Area_SqInch","Units_Area_SqMeter","Units_Area_SqMile","Units_Area_SqMilimeter","Units_Area_SqYard","Units_Length_Centimeters","Units_Length_Feet","Units_Length_Inches","Units_Length_Kilometers","Units_Length_Meters","Units_Length_Miles","Units_Length_Millimeters","Units_Length_Yards","Units_Speed_KilometerPerHour","Units_Speed_MilesPerHour","Units_Temp_Celsius","Units_Temp_Fahrenheit","Units_Temp_Kelvin","Units_Time_Days","Units_Time_Hours","Units_Time_Milliseconds","Units_Time_Minutes","Units_Time_Seconds","Units_Time_Years","Units_Volume_Cups","Units_Volume_Gallons","Units_Volume_Imperial_Gallons","Units_Volume_Imperial_Ounces","Units_Volume_Imperial_Pints","Units_Volume_Liters","Units_Volume_Ounces","Units_Volume_Quarts","Units_Weight_Grams","Units_Weight_ImperialTons","Units_Weight_Kilograms","Units_Weight_MetricTons","Units_Weight_Ounces","Units_Weight_Pounds","Units_Weight_Tons","lng","keySeparator","interpolation","escapeValue","ConversionCard","props","t","useTranslation","history","useHistory","Col","Card","className","Title","src","icon_url","alt","category","Body","Button","variant","onClick","push","navigate_to","ConversionRow","Row","xs","sm","md","lg","columns","map","conversion","key","icon","slug","CategoryDisplay","conversions","conversionData","sort","a","b","chunks","input","chunk_size","results","length","splice","chunkArray","chunk","idx","NotFound","ConversionDisplay","detail","id","filter","con","ConversionDetail","params","InputGroup","Prepend","Text","Form","Control","as","custom","units","unit","value","resourceName","FormControl","aria-label","aria-describedby","App","Container","width","height","path","render","target","rel","href","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.62eb02bc.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\n// the translations\n// (tip move them in a JSON file and import them)\nconst resources = {\n  en: {\n    translation: {\n      App_Title: \"Unit Converter\",\n      App_SubTitle: \"Convert values from one unit of measure to another.\",\n      Header_Conversions:\"Conversions\",\n      Convert_Value:\"Value\",\n      Convert_From:\"From\",\n      Convert_To:\"To\",\n      UnitGroup_Angle:\"angle\",\n      UnitGroup_Area:\"area\",\n      UnitGroup_Length:\"length\",\n      UnitGroup_Speed:\"speed\",\n      UnitGroup_Temp:\"temp\",\n      UnitGroup_Time:\"time\",\n      UnitGroup_Volume:\"volume\",\n      UnitGroup_Weight:\"weight\",\n      Units_Angle_Degrees:\"Degrees\",\n      Units_Angle_Radians:\"Radians\",\n      Units_Area_Acre:\"Acre\",\n      Units_Area_SqCentimeter:\"SqCm\",\n      Units_Area_SqFeet:\"SqFt\",\n      Units_Area_SqInch:\"SqIn\",\n      Units_Area_SqMeter:\"SqM\",\n      Units_Area_SqMile:\"SqMi\",\n      Units_Area_SqMilimeter:\"SqMm\",\n      Units_Area_SqYard:\"SqYd\",\n      Units_Length_Centimeters:\"Centimetres\",\n      Units_Length_Feet:\"Feet\",\n      Units_Length_Inches:\"Inches\",\n      Units_Length_Kilometers:\"Kilometres\",\n      Units_Length_Meters:\"Metres\",\n      Units_Length_Miles:\"Miles\",\n      Units_Length_Millimeters:\"Millimetres\",\n      Units_Length_Yards:\"Yards\",\n      Units_Speed_KilometerPerHour:\"Km/H\",\n      Units_Speed_MilesPerHour:\"MPH\",\n      Units_Temp_Celsius:\"Celsius\",\n      Units_Temp_Fahrenheit:\"Fahrenheit\",\n      Units_Temp_Kelvin:\"Kelvin\",\n      Units_Time_Days:\"Days\",\n      Units_Time_Hours:\"Hours\",\n      Units_Time_Milliseconds:\"Milliseconds\",\n      Units_Time_Minutes:\"Minutes\",\n      Units_Time_Seconds:\"Seconds\",\n      Units_Time_Years:\"Years\",\n      Units_Volume_Cups:\"Cups\",\n      Units_Volume_Gallons:\"Gallons (US)\",\n      Units_Volume_Imperial_Gallons:\"Gallons (UK)\",\n      Units_Volume_Imperial_Ounces:\"Ounces (UK)\",\n      Units_Volume_Imperial_Pints:\"Pints (UK)\",\n      Units_Volume_Liters:\"Litres\",\n      Units_Volume_Ounces:\"Ounces (US)\",\n      Units_Volume_Quarts:\"Quarts\",\n      Units_Weight_Grams:\"Grammes\",\n      Units_Weight_ImperialTons:\"Tons (UK)\",\n      Units_Weight_Kilograms:\"Kilogrammes\",\n      Units_Weight_MetricTons:\"MTons\",\n      Units_Weight_Ounces:\"Ounces\",\n      Units_Weight_Pounds:\"Pounds\",\n      Units_Weight_Tons:\"Tons (US)\"\n    },\n  },\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: \"en\",\n\n    keySeparator: false, // we do not use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  });\n\nexport default i18n;\n","import React from \"react\";\nimport { Button, Card, Col, Row } from \"react-bootstrap\";\nimport { useTranslation } from \"react-i18next\";\nimport { useHistory } from \"react-router-dom\";\nimport conversionData from \"../../data/conversions_v2.json\";\nimport Conversion from \"../../types/Conversion\";\nimport { chunkArray } from \"../../utils\";\n\n/* Some sizes to break the grid on */\nconst xs_size: number = 2;\nconst sm_size: number = 2;\nconst md_size: number = 2;\nconst lg_size: number = 4;\n\nconst ConversionCard = (props: {\n  category: string;\n  icon_url: string;\n  navigate_to: string;\n}) => {\n  const { t } = useTranslation();\n  let history = useHistory();\n\n  function handleClick() {\n    history.push(props.navigate_to);\n  }\n\n  return (\n    <Col>\n      <Card className=\"mb-3\">\n        {/* <Card.Img variant=\"top\" src={props.icon_url} /> */}\n        <Card.Title className=\"text-center mb-0 mt-1\">\n          <img src={props.icon_url} alt={t(props.category)} />\n        </Card.Title>\n        <Card.Body className=\"text-center\">\n          <Button\n            className=\"stretched-link\"\n            variant=\"success\"\n            onClick={handleClick}\n          >\n            {t(props.category)}\n          </Button>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nconst ConversionRow = (props: { columns: Conversion[] }) => {\n  return (\n    <Row xs={xs_size} sm={sm_size} md={md_size} lg={lg_size}>\n      {props.columns.map((conversion) => (\n        <ConversionCard\n          key={conversion.category}\n          category={conversion.category}\n          icon_url={conversion.icon}\n          navigate_to={conversion.slug}\n        />\n      ))}\n    </Row>\n  );\n};\n\nconst CategoryDisplay = () => {\n  // Load the arary from the local json conversions file.\n  const conversions: Conversion[] = [...conversionData];\n  conversions.sort((a, b) => {\n    return a.sort - b.sort;\n  });\n  const chunks: Conversion[][] = chunkArray(conversions, lg_size);\n\n  return (\n    <>\n      {chunks.map((chunk, idx) => (\n        <ConversionRow key={idx} columns={chunk} />\n      ))}\n    </>\n  );\n};\n\nexport default CategoryDisplay;\n","import Conversion from \"./types/Conversion\";\n\nexport function chunkArray(input: Conversion[], chunk_size: number) {\n  var results = [];\n\n  while (input.length) {\n    results.push(input.splice(0, chunk_size));\n  }\n\n  return results;\n}\n","import React from \"react\";\n\nconst NotFound = () => {\n  return (\n    <>\n      <div>404 Page Not Found</div>\n    </>\n  );\n};\n\nexport default NotFound;\n","import React from \"react\";\nimport { Col, Form, FormControl, InputGroup, Row } from \"react-bootstrap\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useTranslation } from \"react-i18next\";\nimport conversionData from \"../../data/conversions_v2.json\";\nimport Conversion from \"../../types/Conversion\";\nimport NotFound from \"../NotFound/NotFound\";\n\nconst ConversionDetail = (id: string) => {\n  const conversions: Conversion[] = [...conversionData];\n  const conversion: Conversion[] = conversions.filter((con) => con.slug === id);\n\n  if (conversion.length === 0) {\n    return null;\n  }\n\n  return conversion[0];\n};\n\nconst ConversionDisplay = (props: any) => {\n  const { t } = useTranslation();\n\n  const { match } = props;\n  const detail = ConversionDetail(match.params.id);\n\n  if (detail === null) {\n    return (\n      <>\n        <Helmet>\n          <title>404 - {t(\"App_Title\")}</title>\n        </Helmet>\n        <NotFound />\n      </>\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>\n          {t(detail.category)} - {t(\"App_Title\")}\n        </title>\n      </Helmet>\n      <Row>\n        <Col className=\"text-center\">\n        {t(detail.category)}\n        </Col>\n      </Row>            \n      <Row xs=\"1\" sm=\"1\" md=\"3\" lg=\"3\">\n        <Col className=\"text-right\">\n                    <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"inputGroup-sizing-default\">{t(\"Convert_From\")}</InputGroup.Text>\n            </InputGroup.Prepend>\n<Form.Control as=\"select\" custom>\n      {detail.units.map((unit) => (\n        <option value={unit.resourceName}>{t(unit.resourceName)}</option>\n      ))}\n    </Form.Control>\n          </InputGroup>\n        </Col>\n        <Col className=\"text-center\">\n          <InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"inputGroup-sizing-default\">{t(\"Convert_Value\")}</InputGroup.Text>\n            </InputGroup.Prepend>\n            <FormControl\n              aria-label=\"Default\"\n              aria-describedby=\"inputGroup-sizing-default\"\n            />\n          </InputGroup>\n        </Col>\n        <Col className=\"text-left\">\n<InputGroup className=\"mb-3\">\n            <InputGroup.Prepend>\n              <InputGroup.Text id=\"inputGroup-sizing-default\">{t(\"Convert_To\")}</InputGroup.Text>\n            </InputGroup.Prepend>\n<Form.Control as=\"select\" custom>\n      {detail.units.map((unit) => (\n        <option value={unit.resourceName}>{t(unit.resourceName)}</option>\n      ))}\n    </Form.Control>\n          </InputGroup>\n\n        </Col>\n      </Row>\n    </>\n  );\n};\n\nexport default ConversionDisplay;\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport { Helmet } from \"react-helmet-async\";\nimport { useTranslation } from \"react-i18next\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport CategoryDisplay from \"../CategoryDisplay/CategoryDisplay\";\nimport ConversionDisplay from \"../ConversionDisplay/ConversionDisplay\";\n\nconst App = () => {\n  const { t } = useTranslation();\n\n  return (\n    <Container className=\"p-3\">\n      <Helmet>\n        <title>{t(\"App_Title\")}</title>\n      </Helmet>\n      <div className=\"text-center\">\n        <img\n          className=\"d-block mx-auto mb-4\"\n          src=\"/unit-converter/android-chrome-192x192.png\"\n          alt=\"\"\n          width=\"72\"\n          height=\"72\"\n        />\n        <h2>{t(\"App_Title\")}</h2>\n        <p className=\"lead\">{t(\"App_SubTitle\")}</p>\n      </div>\n      <Router>\n        <Switch>\n          <Route\n            path=\"/:id\"\n            render={(props) => {\n              return <ConversionDisplay {...props} />;\n            }}\n          />\n          <Route path=\"/\">\n            <CategoryDisplay />\n          </Route>\n        </Switch>\n      </Router>\n      icons by{\" \"}\n      <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://icons8.com\">\n        Icons8\n      </a>\n      , source code on{\" \"}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/ian-hamlin/unit-converter\"\n      >\n        GitHub\n      </a>\n    </Container>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./i18n\";\nimport App from \"./components/App/App\";\nimport { HelmetProvider } from \"react-helmet-async\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HelmetProvider>\n      <App />\n    </HelmetProvider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}