{"version":3,"sources":["serviceWorker.ts","i18n.ts","components/App/App.tsx","utils.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","i18n","use","initReactI18next","init","resources","en","translation","App_Title","App_SubTitle","Category_Length","Category_Temp","Category_Time","Category_Volume","Category_Weight","Category_Angle","Category_Area","Category_Speed","lng","keySeparator","interpolation","escapeValue","ConversionCard","props","useTranslation","t","Col","Card","border","className","Title","src","icon_url","Body","Button","variant","category","ConversionRow","Row","xs","sm","md","lg","columns","map","conversion","key","icon","App","chunks","input","chunk_size","results","length","push","splice","chunkArray","conversionData","Container","alt","width","height","chunk","idx","target","href","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"48BAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,kBCINC,IACGC,IAAIC,KACJC,KAAK,CACJC,UApBc,CAChBC,GAAI,CACFC,YAAa,CACXC,UAAW,iBACXC,aAAc,sDACdC,gBAAiB,SACjBC,cAAe,OACfC,cAAe,OACfC,gBAAiB,SACjBC,gBAAiB,SACjBC,eAAgB,QAChBC,cAAe,OACfC,eAAgB,WASlBC,IAAK,KAELC,cAAc,EAEdC,cAAe,CACbC,aAAa,KAIJpB,EAAf,EAAeA,I,mEClBTqB,EAAiB,SAACC,GAAmD,IAAD,EACpDC,cAAZC,EADgE,EAChEA,EADgE,EAC7DxB,KAEX,OACE,kBAACyB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAAMC,OAAO,UAAUC,UAAU,QAE/B,kBAACF,EAAA,EAAKG,MAAN,CAAYD,UAAU,yBACpB,yBAAKE,IAAKR,EAAMS,YAElB,kBAACL,EAAA,EAAKM,KAAN,CAAWJ,UAAU,eACnB,kBAACK,EAAA,EAAD,CAAQL,UAAU,iBAAiBM,QAAQ,WACxCV,EAAEF,EAAMa,eAQfC,EAAgB,SAACd,GACrB,OACE,kBAACe,EAAA,EAAD,CAAKC,GA3Be,EA2BFC,GA1BE,EA0BWC,GAzBX,EAyBwBC,GAxBxB,GAyBjBnB,EAAMoB,QAAQC,KAAI,SAACC,GAAD,OACjB,kBAAC,EAAD,CACEC,IAAKD,EAAWT,SAChBA,SAAUS,EAAWT,SACrBJ,SAAUa,EAAWE,YAsChBC,EA/BH,WAAO,IAAD,EACIxB,cAAZC,EADQ,EACRA,EAIFwB,GALU,EACLhD,KClDN,SAAoBiD,EAAqBC,GAG9C,IAFA,IAAIC,EAAU,GAEPF,EAAMG,QACXD,EAAQE,KAAKJ,EAAMK,OAAO,EAAGJ,IAG/B,OAAOC,ED+CwBI,CADA,YAAOC,GAxChB,IA2CtB,OACE,kBAACC,EAAA,EAAD,CAAW7B,UAAU,OACnB,yBAAKA,UAAU,eACb,yBACEA,UAAU,uBACVE,IAAI,6CACJ4B,IAAI,GACJC,MAAM,KACNC,OAAO,OAET,4BAAKpC,EAAE,cACP,uBAAGI,UAAU,QAAQJ,EAAE,kBAExBwB,EAAOL,KAAI,SAACkB,EAAOC,GAAR,OACV,kBAAC,EAAD,CAAejB,IAAKiB,EAAKpB,QAASmB,OAbtC,WAeW,IACT,uBAAGE,OAAO,SAASC,KAAK,sBAAxB,YErENC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SJiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.369c7fed.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import i18n from \"i18next\";\nimport { initReactI18next } from \"react-i18next\";\n\n// the translations\n// (tip move them in a JSON file and import them)\nconst resources = {\n  en: {\n    translation: {\n      App_Title: \"Unit Converter\",\n      App_SubTitle: \"Convert values from one unit of measure to another.\",\n      Category_Length: \"Length\",\n      Category_Temp: \"Temp\",\n      Category_Time: \"Time\",\n      Category_Volume: \"Volume\",\n      Category_Weight: \"Weight\",\n      Category_Angle: \"Angle\",\n      Category_Area: \"Area\",\n      Category_Speed: \"Speed\",\n    },\n  },\n};\n\ni18n\n  .use(initReactI18next) // passes i18n down to react-i18next\n  .init({\n    resources,\n    lng: \"en\",\n\n    keySeparator: false, // we do not use keys in form messages.welcome\n\n    interpolation: {\n      escapeValue: false, // react already safes from xss\n    },\n  });\n\nexport default i18n;\n","import React from \"react\";\nimport Container from \"react-bootstrap/Container\";\nimport Button from \"react-bootstrap/Button\";\nimport Row from \"react-bootstrap/Row\";\nimport Col from \"react-bootstrap/Col\";\nimport Card from \"react-bootstrap/Card\";\nimport Media from \"react-bootstrap/Media\";\nimport { chunkArray } from \"../../utils\";\nimport conversionData from \"../../data/conversions.json\";\nimport Conversion from \"../../types/Conversion\";\nimport { useTranslation } from \"react-i18next\";\n\nconst xs_size: number = 1;\nconst sm_size: number = 2;\nconst md_size: number = 2;\nconst lg_size: number = 4;\n\nconst ConversionCard = (props: { category: string; icon_url: string }) => {\n  const { t, i18n } = useTranslation();\n\n  return (\n    <Col>\n      <Card border=\"success\" className=\"mb-3\">\n        {/* <Card.Img variant=\"top\" src={props.icon_url} /> */}\n        <Card.Title className=\"text-center mb-0 mt-1\">\n          <img src={props.icon_url} />\n        </Card.Title>\n        <Card.Body className=\"text-center\">\n          <Button className=\"stretched-link\" variant=\"success\">\n            {t(props.category)}\n          </Button>\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nconst ConversionRow = (props: { columns: Conversion[] }) => {\n  return (\n    <Row xs={xs_size} sm={sm_size} md={md_size} lg={lg_size}>\n      {props.columns.map((conversion) => (\n        <ConversionCard\n          key={conversion.category}\n          category={conversion.category}\n          icon_url={conversion.icon}\n        />\n      ))}\n    </Row>\n  );\n};\n\nconst App = () => {\n  const { t, i18n } = useTranslation();\n\n  // Load the arary from the local json conversions file.\n  const conversions: Conversion[] = [...conversionData];\n  const chunks: Conversion[][] = chunkArray(conversions, lg_size);\n\n  return (\n    <Container className=\"p-3\">\n      <div className=\"text-center\">\n        <img\n          className=\"d-block mx-auto mb-4\"\n          src=\"/unit-converter/android-chrome-192x192.png\"\n          alt=\"\"\n          width=\"72\"\n          height=\"72\"\n        />\n        <h2>{t(\"App_Title\")}</h2>\n        <p className=\"lead\">{t(\"App_SubTitle\")}</p>\n      </div>\n      {chunks.map((chunk, idx) => (\n        <ConversionRow key={idx} columns={chunk} />\n      ))}\n      icons by{\" \"}\n      <a target=\"_blank\" href=\"https://icons8.com\">\n        Icons8\n      </a>\n    </Container>\n  );\n};\n\nexport default App;\n","import Conversion from \"./types/Conversion\";\n\nexport function chunkArray(input: Conversion[], chunk_size: number) {\n  var results = [];\n\n  while (input.length) {\n    results.push(input.splice(0, chunk_size));\n  }\n\n  return results;\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./i18n\";\nimport App from \"./components/App/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}